module.exports = {

    // [JS]
    //
    // An .eslintrc starter file with all rules (set to 0) and envs (set to false) listed.
    // Other options (although by no means comprehensive) are either set to false or else commented out.
    //
    // Updated on 2017-12-16.
    //
    // Starter file generated by ESLint Starter File Generator:
    //     https://github.com/i-ron-y/eslint-starter-generator
    //
    // ESLint docs -- Configuring ESLint:      https://eslint.org/docs/user-guide/configuring
    // ESLint docs -- List of available rules: https://eslint.org/docs/rules/


    "parserOptions": {

        "ecmaVersion": 6,                       // set to 3, 5 (default), 6, 7, or 8 to specify the version of ECMAScript syntax you want to use.
        //                                         // You can also set to 2015 (same as 6), 2016 (same as 7), or 2017 (same as 8) to use the year-based naming.

        "sourceType": "module",                 // set to "script" (default) or "module" if your code is in ECMAScript modules.

        "ecmaFeatures": {

            "globalReturn": false,              // allow return statements in the global scope
            "impliedStrict": false,             // enable global strict mode (if ecmaVersion is 5 or greater)
            "jsx": true,                       // enable JSX

            "experimentalObjectRestSpread": true   // enable support for the experimental object rest/spread properties
            // (IMPORTANT: This is an experimental feature that may change significantly in the future.
            // It�s recommended that you do not write rules relying on this functionality unless you are
            // willing to incur maintenance cost when it changes.)

        }

    },


    "parser": "babel-eslint",                   // compatible parsers: "espree" (default), "esprima", "babel-eslint", and "typescript-eslint-parser" (experimental)


    "env": {

        "browser": true,                       // browser global variables
        "node": true,                          // Node.js global variables and Node.js scoping.
        "commonjs": false,                      // CommonJS global variables and CommonJS scoping (use this for browser-only code that uses Browserify/WebPack).
        "shared-node-browser": false,           // Globals common to both Node and Browser.
        "es6": false,                           // enable all ECMAScript 6 features except for modules (this automatically sets the ecmaVersion parser option to 6).
        "worker": false,                        // web workers global variables.
        "amd": false,                           // defines require() and define() as global variables as per the amd spec
        "mocha": false,                         // adds all of the Mocha testing global variables
        "jasmine": false,                       // adds all of the Jasmine testing global variables for version 1.3 and 2.0
        "jest": false,                          // Jest global variables.
        "phantomjs": false,                     // PhantomJS global variables
        "protractor": false,                    // Protractor global variables
        "qunit": false,                         // QUnit global variables.
        "jquery": false,                        // jQuery global variables
        "prototypejs": false,                   // Prototype.js global variables
        "shelljs": false,                       // ShellJS global variables
        "meteor": false,                        // Meteor global variables.
        "mongo": false,                         // MongoDB global variables.
        "applescript": false,                   // AppleScript global variables.
        "nashorn": false,                       // Java 8 Nashorn global variables.
        "serviceworker": false,                 // Service Worker global variables.
        "atomtest": false,                      // Atom test helper globals.
        "embertest": false,                     // Ember test helper globals.
        "webextensions": false,                 // WebExtensions globals.
        "greasemonkey": false,                  // GreaseMonkey globals.
        "mocha": true,
    },


      "globals": {
        "Image": true,
        "window": true,
        "document": true,
        "ImageData": true,
        "XMLHttpRequest": true,
        "FileReader": true,
        "$": true,
        "Float32Array": true,
        "Float16Array": true,
        "Uint8Array": true,
        "Uint32Array": true,
      },
  

    "plugins": [

        // e.g. "react" (must run `npm install eslint-plugin-react` first)

    ],


    "extends": [

        // "eslint:recommended"                    // enables a subset of core rules that report common problems, which have a check mark on the rules page
        // "eslint:all"                            // enable all core rules in the currently installed version of ESLint

    ],


    "rules": {

        // Usage:
        //    "off" or 0 - turn the rule off
        //    "warn" or 1 - turn the rule on as a warning (doesn�t affect exit code)
        //    "error" or 2 - turn the rule on as an error (exit code is 1 when triggered)
        //
        //    If a rule has additional options, you can specify them using array literal syntax, such as:
        //        "quotes": [2, "double"]


        //////// Possible Errors ////////

        "for-direction": 0,                     // enforce �for� loop update clause moving the counter in the right direction.
        "getter-return": 0,                     // enforce return statements in getters
        "no-await-in-loop": 0,                  // disallow await inside of loops
        "no-compare-neg-zero": 0,               // disallow comparing against -0
        // disallow assignment in conditional expressions
        'no-cond-assign': ['error', 'always'],
        "no-console": 'error',                        // disallow the use of console
        // disallow use of constant expressions in conditions
        'no-constant-condition': 'error',
        "no-control-regex": 0,                  // disallow control characters in regular expressions
        "no-debugger": 0,                       // disallow the use of debugger
        "no-dupe-args": 0,                      // disallow duplicate arguments in function definitions
        "no-dupe-keys": 0,                      // disallow duplicate keys in object literals
        "no-duplicate-case": 0,                 // disallow duplicate case labels
        "no-empty": 'error',                          // disallow empty block statements
        "no-empty-character-class": 0,          // disallow empty character classes in regular expressions
        "no-ex-assign": 0,                      // disallow reassigning exceptions in catch clauses
        "no-extra-boolean-cast": 0,             // disallow unnecessary boolean casts
        "no-extra-parens": 0,                   // disallow unnecessary parentheses
        "no-extra-semi": 'error',                     // disallow unnecessary semicolons
        "no-func-assign": 0,                    // disallow reassigning function declarations
        "no-inner-declarations": 0,             // disallow variable or function declarations in nested blocks
        "no-invalid-regexp": 0,                 // disallow invalid regular expression strings in RegExp constructors
        "no-irregular-whitespace": 0,           // disallow irregular whitespace outside of strings and comments
        "no-obj-calls": 0,                      // disallow calling global object properties as functions
        // disallow use of Object.prototypes builtins directly
        // http://eslint.org/docs/rules/no-prototype-builtins
        'no-prototype-builtins': 'error',
        "no-regex-spaces": 0,                   // disallow multiple spaces in regular expressions
        "no-sparse-arrays": 0,                  // disallow sparse arrays
        "no-template-curly-in-string": 0,       // disallow template literal placeholder syntax in regular strings
        "no-unexpected-multiline": 0,           // disallow confusing multiline expressions
        "no-unreachable": 'error',                    // disallow unreachable code after return, throw, continue, and break statements
        "no-unsafe-finally": 0,                 // disallow control flow statements in finally blocks
        "no-unsafe-negation": 0,                // disallow negating the left operand of relational operators
        "use-isnan": 0,                         // require calls to isNaN() when checking for NaN
        "valid-jsdoc": 0,                       // enforce valid JSDoc comments
        "valid-typeof": 0,                      // enforce comparing typeof expressions against valid strings


        //////// Best Practices ////////

        "accessor-pairs": 0,                    // enforce getter and setter pairs in objects
        "array-callback-return": 0,             // enforce return statements in callbacks of array methods
        "block-scoped-var": 2,                  // enforce the use of variables within the scope they are defined
        "class-methods-use-this": 0,            // enforce that class methods utilize this
        "complexity": 0,                        // enforce a maximum cyclomatic complexity allowed in a program
        "consistent-return": 'error',                 // require return statements to either always or never specify values
        "curly": 2,                             // enforce consistent brace style for all control statements
        // require default case in switch statements
        'default-case': ['error', { commentPattern: '^no default$' }],
        "dot-location": 0,                      // enforce consistent newlines before and after dots
        'dot-notation': ['error', { allowKeywords: true }],        // enforce dot notation whenever possible
        "eqeqeq": ["error", "always", {"null": "ignore"}],                            // require the use of === and !==
        // make sure for-in loops have an if statement
        'guard-for-in': 'error',
        "no-alert": 'error',                          // disallow the use of alert, confirm, and prompt
        "no-caller": 0,                         // disallow the use of arguments.caller or arguments.callee
        // disallow lexical declarations in case/default clauses
        // http://eslint.org/docs/rules/no-case-declarations.html
        'no-case-declarations': 'error',
        "no-div-regex": 0,                      // disallow division operators explicitly at the beginning of regular expressions
        // disallow else after a return in an if
        // https://eslint.org/docs/rules/no-else-return
        'no-else-return': ['error', { allowElseIf: true }],
        "no-empty-function": 0,                 // disallow empty functions
        "no-empty-pattern": 0,                  // disallow empty destructuring patterns
        "no-eq-null": 0,                        // disallow null comparisons without type-checking operators
        "no-eval": 0,                           // disallow the use of eval()
        // disallow adding to native types
        'no-extend-native': 'error',
        "no-extra-bind": 0,                     // disallow unnecessary calls to .bind()
        "no-extra-label": 0,                    // disallow unnecessary labels
        // disallow fallthrough of case statements
        'no-fallthrough': 'error',
        "no-floating-decimal": 0,               // disallow leading or trailing decimal points in numeric literals
        "no-global-assign": 0,                  // disallow assignments to native objects or read-only global variables
        "no-implicit-coercion": 0,              // disallow shorthand type conversions
        "no-implicit-globals": 0,               // disallow variable and function declarations in the global scope
        "no-implied-eval": 0,                   // disallow the use of eval()-like methods
        "no-invalid-this": 0,                   // disallow this keywords outside of classes or class-like objects
        "no-iterator": 0,                       // disallow the use of the __iterator__ property
        "no-labels": 0,                         // disallow labeled statements
        "no-lone-blocks": 0,                    // disallow unnecessary nested blocks
        // disallow creation of functions within loops
        'no-loop-func': 'error',
        "no-magic-numbers": 0,                  // disallow magic numbers
        "no-multi-spaces": 'error',                   // disallow multiple spaces
        "no-multi-str": 0,                      // disallow multiline strings
        'no-new': 'error',
        "no-new-func": 0,                       // disallow new operators with the Function object
        "no-new-wrappers": 0,                   // disallow new operators with the String, Number, and Boolean objects
        "no-octal": 0,                          // disallow octal literals
        "no-octal-escape": 0,                   // disallow octal escape sequences in string literals
        // disallow reassignment of function parameters
        // disallow parameter object manipulation except for specific exclusions
        // rule: http://eslint.org/docs/rules/no-param-reassign.html
        'no-param-reassign': ['error', {
          props: true,
          ignorePropertyModificationsFor: [
            'acc', // for reduce accumulators
            'e', // for e.returnvalue
            'ctx', // for Koa routing
            'req', // for Express requests
            'request', // for Express requests
            'res', // for Express responses
            'response', // for Express responses
            '$scope', // for Angular 1 scopes
          ]
        }],
        "no-proto": 0,                          // disallow the use of the __proto__ property
        "no-redeclare": 0,                      // disallow variable redeclaration
        // disallow certain object properties
        // http://eslint.org/docs/rules/no-restricted-properties
        'no-restricted-properties': ['error', {
          object: 'arguments',
          property: 'callee',
          message: 'arguments.callee is deprecated',
        }, {
          object: 'global',
          property: 'isFinite',
          message: 'Please use Number.isFinite instead',
        }, {
          object: 'self',
          property: 'isFinite',
          message: 'Please use Number.isFinite instead',
        }, {
          object: 'window',
          property: 'isFinite',
          message: 'Please use Number.isFinite instead',
        }, {
          object: 'global',
          property: 'isNaN',
          message: 'Please use Number.isNaN instead',
        }, {
          object: 'self',
          property: 'isNaN',
          message: 'Please use Number.isNaN instead',
        }, {
          object: 'window',
          property: 'isNaN',
          message: 'Please use Number.isNaN instead',
        }, {
          property: '__defineGetter__',
          message: 'Please use Object.defineProperty instead.',
        }, {
          property: '__defineSetter__',
          message: 'Please use Object.defineProperty instead.',
        }, {
          object: 'Math',
          property: 'pow',
          message: 'Use the exponentiation operator (**) instead.',
        }],        // disallow use of assignment in return statement
        'no-return-assign': ['error', 'always'],
        "no-return-await": 0,                   // disallow unnecessary return await
        "no-script-url": 0,                     // disallow javascript: urls
        "no-self-assign": 0,                    // disallow assignments where both sides are exactly the same
        "no-self-compare": 0,                   // disallow comparisons where both sides are exactly the same
        "no-sequences": 0,                      // disallow comma operators
        "no-throw-literal": 'error',                  // disallow throwing literals as exceptions
        "no-unmodified-loop-condition": 0,      // disallow unmodified loop conditions
        // disallow usage of expressions in statement position
        'no-unused-expressions': ['error', {
          allowShortCircuit: false,
          allowTernary: false,
          allowTaggedTemplates: false,
        }],
        "no-unused-labels": 0,                  // disallow unused labels
        "no-useless-call": 0,                   // disallow unnecessary calls to .call() and .apply()
        "no-useless-concat": 0,                 // disallow unnecessary concatenation of literals or template literals
        "no-useless-escape": 'error',                 // disallow unnecessary escape characters
        "no-useless-return": 'error',                 // disallow redundant return statements
        "no-void": 0,                           // disallow void operators
        "no-warning-comments": 0,               // disallow specified warning terms in comments
        "no-with": 0,                           // disallow with statements
        "prefer-promise-reject-errors": 0,      // require using Error objects as Promise rejection reasons
        "radix": 'error',                             // enforce the consistent use of the radix argument when using parseInt()
        "require-await": 0,                     // disallow async functions which have no await expression
        "vars-on-top": 0,                       // require var declarations be placed at the top of their containing scope
        'wrap-iife': ['error', 'outside', { functionPrototypeMethods: false }], // require parentheses around immediate function invocations
        "yoda": 0,                              // require or disallow �Yoda� conditions


        //////// Strict Mode ////////

        "strict": 0,                            // require or disallow strict mode directives


        //////// Variables ////////

        "init-declarations": 0,                 // require or disallow initialization in variable declarations
        "no-catch-shadow": 0,                   // disallow catch clause parameters from shadowing variables in the outer scope
        "no-delete-var": 0,                     // disallow deleting variables
        "no-label-var": 0,                      // disallow labels that share a name with a variable
        "no-restricted-globals": 0,             // disallow specified global variables
        // disallow declaration of variables already declared in the outer scope
        'no-shadow': 'error',
        "no-shadow-restricted-names": 0,        // disallow identifiers from shadowing restricted names
        // disallow use of undeclared variables unless mentioned in a /*global */ block
        'no-undef': 'error',
        "no-undef-init": 0,                     // disallow initializing variables to undefined
        "no-undefined": 0,                      // disallow the use of undefined as an identifier
        // disallow declaration of variables that are not used in the code
        'no-unused-vars': ['error', { vars: 'all', args: 'after-used', ignoreRestSiblings: true }],
        // disallow use of variables before they are defined
        'no-use-before-define': ['error', { functions: false, classes: true, variables: true }],


        //////// Node.js and CommonJS ////////

        "callback-return": 0,                   // require return statements after callbacks
        "global-require": 0,                    // require require() calls to be placed at top-level module scope
        "handle-callback-err": 0,               // require error handling in callbacks
        "no-buffer-constructor": 0,             // disallow use of the Buffer() constructor
        "no-mixed-requires": 0,                 // disallow require calls to be mixed with regular variable declarations
        "no-new-require": 0,                    // disallow new operators with calls to require
        "no-path-concat": 0,                    // disallow string concatenation with __dirname and __filename
        "no-process-env": 0,                    // disallow the use of process.env
        "no-process-exit": 0,                   // disallow the use of process.exit()
        "no-restricted-modules": 0,             // disallow specified modules when loaded by require
        "no-sync": 0,                           // disallow synchronous methods


        //////// Stylistic Issues ////////

        "array-bracket-newline": 0,             // enforce linebreaks after opening and before closing array brackets
        "array-bracket-spacing": 2,             // enforce consistent spacing inside array brackets
        "array-element-newline": 0,             // enforce line breaks after each array element
        "block-spacing": 0,                     // disallow or enforce spaces inside of blocks after opening block and before closing block
        "brace-style": 2,                       // enforce consistent brace style for blocks
        // require camel case names
        camelcase: ['error', { properties: 'never' }],
        "capitalized-comments": 0,              // enforce or disallow capitalization of the first letter of a comment
        // require trailing commas in multiline object literals
        'comma-dangle': ['error', {
          arrays: 'always-multiline',
          objects: 'always-multiline',
          imports: 'always-multiline',
          exports: 'always-multiline',
          functions: 'always-multiline',
        }],
        "comma-spacing": 2,                     // enforce consistent spacing before and after commas
        "comma-style": 0,                       // enforce consistent comma style
        "computed-property-spacing": 0,         // enforce consistent spacing inside computed property brackets
        "consistent-this": 0,                   // enforce consistent naming when capturing the current execution context
        // enforce newline at the end of file, with no multiple empty lines
        'eol-last': ['error', 'always'],
        "func-call-spacing": 0,                 // require or disallow spacing between function identifiers and their invocations
        "func-name-matching": 0,                // require function names to match the name of the variable or property to which they are assigned
        "func-names": 0,                        // require or disallow named function expressions
        "func-style": 0,                        // enforce the consistent use of either function declarations or expressions
        // enforce consistent line breaks inside function parentheses
        'function-paren-newline': ['error', 'multiline'],
        "id-blacklist": 0,                      // disallow specified identifiers
        "id-length": 0,                         // enforce minimum and maximum identifier lengths
        "id-match": 0,                          // require identifiers to match a specified regular expression
        "implicit-arrow-linebreak": 0,          // enforce the location of arrow function bodies
        "indent": ["error", 2, { "SwitchCase": 1 }], // enforce consistent indentation
        "jsx-quotes": 0,                        // enforce the consistent use of either double or single quotes in JSX attributes
        // enforces spacing between keys and values in object literal properties
        'key-spacing': ['error', { beforeColon: false, afterColon: true }],

        // require a space before & after certain keywords
        'keyword-spacing': ['error', {
          before: true,
          after: true,
          overrides: {
            return: { after: true },
            throw: { after: true },
            case: { after: true }
          }
        }],
        "line-comment-position": 0,             // enforce position of line comments
        "linebreak-style": 0,                   // enforce consistent linebreak style
        "lines-around-comment": 0,              // require empty lines around comments
        "lines-between-class-members": 0,       // require or disallow an empty line between class members
        "max-depth": 0,                         // enforce a maximum depth that blocks can be nested
        // specify the maximum length of a line in your program
        // http://eslint.org/docs/rules/max-len
        'max-len': ['error', 100, 2, {
          ignoreUrls: true,
          ignoreComments: false,
          ignoreRegExpLiterals: true,
          ignoreStrings: true,
          ignoreTemplateLiterals: true,
        }],
        "max-lines": 0,                         // enforce a maximum number of lines per file
        "max-nested-callbacks": 0,              // enforce a maximum depth that callbacks can be nested
        "max-params": 0,                        // enforce a maximum number of parameters in function definitions
        "max-statements": 0,                    // enforce a maximum number of statements allowed in function blocks
        "max-statements-per-line": 0,           // enforce a maximum number of statements allowed per line
        "multiline-comment-style": 0,           // enforce a particular style for multiline comments
        "multiline-ternary": 0,                 // enforce newlines between operands of ternary expressions
        "new-cap": 0,                           // require constructor names to begin with a capital letter
        "new-parens": 0,                        // require parentheses when invoking a constructor with no arguments
        "newline-per-chained-call": 0,          // require a newline after each call in a method chain
        "no-array-constructor": 0,              // disallow Array constructors
        "no-bitwise": 'error',                        // disallow bitwise operators
        // disallow use of the continue statement
        // http://eslint.org/docs/rules/no-continue
        'no-continue': 'error',
        "no-inline-comments": 0,                // disallow inline comments after code
        "no-lonely-if": 0,                      // disallow if statements as the only statement in else blocks
        'no-mixed-operators': ['error', {
          groups: [
            ['+', '-', '*', '/', '%', '**'],
            ['&', '|', '^', '~', '<<', '>>', '>>>'],
            ['==', '!=', '===', '!==', '>', '>=', '<', '<='],
            ['&&', '||'],
            ['in', 'instanceof']
          ],
          allowSamePrecedence: false
        }],            // disallow mixed binary operators
        "no-mixed-spaces-and-tabs": 0,          // disallow mixed spaces and tabs for indentation
        // disallow use of chained assignment expressions
        // http://eslint.org/docs/rules/no-multi-assign
        'no-multi-assign': ['error'],
        // disallow multiple empty lines and only one newline at the end
        'no-multiple-empty-lines': ['error', { max: 2, maxEOF: 1 }],
        "no-negated-condition": 0,              // disallow negated conditions
        "no-nested-ternary": 'error',                 // disallow nested ternary expressions
        "no-new-object": 0,                     // disallow Object constructors
        'no-plusplus': 'error',                 // disallow the unary operators ++ and --
        // disallow certain syntax forms
        // http://eslint.org/docs/rules/no-restricted-syntax
        'no-restricted-syntax': [
          'error',
          {
            selector: 'ForInStatement',
            message: 'for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array.',
          },
          {
            selector: 'ForOfStatement',
            message: 'iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.',
          },
          {
            selector: 'LabeledStatement',
            message: 'Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand.',
          },
          {
            selector: 'WithStatement',
            message: '`with` is disallowed in strict mode because it makes code impossible to predict and optimize.',
          },
        ],
        "no-tabs": 2,                           // disallow all tabs
        "no-ternary": 0,                        // disallow ternary operators
        "no-trailing-spaces": 2,                // disallow trailing whitespace at the end of lines
        // disallow dangling underscores in identifiers
        'no-underscore-dangle': ['error', {
          allow: [],
          allowAfterThis: false,
          allowAfterSuper: false,
          enforceInMethodNames: false,
        }],
        // disallow the use of Boolean literals in conditional expressions
        // also, prefer `a || b` over `a ? a : b`
        // http://eslint.org/docs/rules/no-unneeded-ternary
        'no-unneeded-ternary': ['error', { defaultAssignment: false }],
        "no-whitespace-before-property": 0,     // disallow whitespace before properties
        "nonblock-statement-body-position": 0,  // enforce the location of single-line statements
        // enforce line breaks between braces
        // http://eslint.org/docs/rules/object-curly-newline
        'object-curly-newline': ['error', {
          ObjectExpression: { minProperties: 4, multiline: true, consistent: true },
          ObjectPattern: { minProperties: 4, multiline: true, consistent: true }
        }],
        // require padding inside curly braces
        'object-curly-spacing': ['error', 'always'],
        // enforce "same line" or "multiple line" on object properties.
        // http://eslint.org/docs/rules/object-property-newline
        'object-property-newline': ['error', {
          allowMultiplePropertiesPerLine: true,
        }],
        // allow just one var statement per function
        'one-var': ['error', 'never'],
        "one-var-declaration-per-line": 2,      // require or disallow newlines around variable declarations
        "operator-assignment": 0,               // require or disallow assignment operator shorthand where possible
        "operator-linebreak": 0,                // enforce consistent linebreak style for operators
        // disallow padding within blocks
        'padded-blocks': ['error', { blocks: 'never', classes: 'never', switches: 'never' }],
        "padding-line-between-statements": 0,   // require or disallow padding lines between statements
        'quote-props': ['error', 'as-needed', { keywords: false, unnecessary: true, numbers: false }], // // require quotes around object literal property names
        "quotes": ["error", "single", { "avoidEscape": true }], // enforce the consistent use of either backticks, double, or single quotes
        "require-jsdoc": 0,                     // require JSDoc comments
        'semi': ['error', 'always'],    // require or disallow use of semicolons instead of ASI
        'semi-spacing': ['error', { before: false, after: true }], // enforce spacing before and after semicolons
        'semi-style': ['error', 'last'],        // enforce location of semicolons
        "sort-keys": 0,                         // require object keys to be sorted
        "sort-vars": 0,                         // require variables within the same declaration block to be sorted
        "space-before-blocks": 'error',               // enforce consistent spacing before blocks
        // require or disallow space before function opening parenthesis
        'space-before-function-paren': ['error', {
          anonymous: 'always',
          named: 'never',
          asyncArrow: 'always'
        }],
        "space-in-parens": 2,                   // enforce consistent spacing inside parentheses
        "space-infix-ops": 'error',                   // require spacing around infix operators
        // Require or disallow spaces before/after unary operators
        'space-unary-ops': ['error', {
          words: true,
          nonwords: false,
          overrides: {
          },
        }],
        "spaced-comment": 'error',                    // enforce consistent spacing after the // or /* in a comment
        "switch-colon-spacing": 0,              // enforce spacing around colons of switch statements
        "template-tag-spacing": 0,              // require or disallow spacing between template tags and their literals
        "unicode-bom": 0,                       // require or disallow Unicode byte order mark (BOM)
        "wrap-regex": 0,                        // require parenthesis around regex literals


        //////// ECMAScript 6 ////////

        "arrow-body-style": 2,                  // require braces around arrow function bodies
        "arrow-parens": [2, "as-needed", { "requireForBlockBody": true }],    // require parentheses around arrow function arguments
        "arrow-spacing": 0,                     // enforce consistent spacing before and after the arrow in arrow functions
        "constructor-super": 0,                 // require super() calls in constructors
        "generator-star-spacing": 0,            // enforce consistent spacing around * operators in generator functions
        "no-class-assign": 0,                   // disallow reassigning class members
        // disallow arrow functions where they could be confused with comparisons
        // http://eslint.org/docs/rules/no-confusing-arrow
        'no-confusing-arrow': ['error', {
          allowParens: true,
        }],
        "no-const-assign": 0,                   // disallow reassigning const variables
        "no-dupe-class-members": 0,             // disallow duplicate class members
        "no-duplicate-imports": 0,              // disallow duplicate module imports
        "no-new-symbol": 0,                     // disallow new operators with the Symbol object
        "no-restricted-imports": 0,             // disallow specified modules when loaded by import
        "no-this-before-super": 0,              // disallow this/super before calling super() in constructors
        "no-useless-computed-key": 0,           // disallow unnecessary computed property keys in object literals
        "no-useless-constructor": 0,            // disallow unnecessary constructors
        "no-useless-rename": 0,                 // disallow renaming import, export, and destructured assignments to the same name
        'no-var': 'error',                      // require let or const instead of var
        // require method and property shorthand syntax for object literals
        // http://eslint.org/docs/rules/object-shorthand
        'object-shorthand': ['error', 'always', {
          ignoreConstructors: false,
          avoidQuotes: true,
        }],
        // suggest using arrow functions as callbacks
        'prefer-arrow-callback': ['error', {
          allowNamedFunctions: false,
          allowUnboundThis: true,
        }],
        'prefer-const': ['error', {
          destructuring: 'any',
          ignoreReadBeforeAssign: true,
        }],                                     
        // require const declarations for variables that are never reassigned after declared
        // Prefer destructuring from arrays and objects
        // http://eslint.org/docs/rules/prefer-destructuring
        'prefer-destructuring': ['error', {
          VariableDeclarator: {
            array: false,
            object: true,
          },
          AssignmentExpression: {
            array: true,
            object: true,
          },
        }, {
          enforceForRenamedProperties: false,
        }],
        "prefer-numeric-literals": 0,           // disallow parseInt() and Number.parseInt() in favor of binary, octal, and hexadecimal literals
        "prefer-rest-params": 'error',                // require rest parameters instead of arguments
        "prefer-spread": 'error',                     // require spread operators instead of .apply()
        "prefer-template": 'error',                   // require template literals instead of string concatenation
        "require-yield": 0,                     // require generator functions to contain yield
        "rest-spread-spacing": 0,               // enforce spacing between rest and spread operators and their expressions
        "sort-imports": 0,                      // enforce sorted import declarations within modules
        "symbol-description": 0,                // require symbol descriptions
        "template-curly-spacing": 'error',            // require or disallow spacing around embedded expressions of template strings
        "yield-star-spacing": 0                 // require or disallow spacing around the * in yield* expressions


        // Static analysis:

        // ensure imports point to files/modules that can be resolved
        // https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-unresolved.md
        'import/no-unresolved': ['error', { commonjs: true, caseSensitive: true }],

        // ensure named imports coupled with named exports
        // https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/named.md#when-not-to-use-it
        'import/named': 'off',

        // ensure default import coupled with default export
        // https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/default.md#when-not-to-use-it
        'import/default': 'off',

        // https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/namespace.md
        'import/namespace': 'off',

        // Helpful warnings:

        // disallow invalid exports, e.g. multiple defaults
        // https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/export.md
        'import/export': 'error',

        // do not allow a default import name to match a named export
        // https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-named-as-default.md
        'import/no-named-as-default': 'error',

        // warn on accessing default export property names that are also named exports
        // https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-named-as-default-member.md
        'import/no-named-as-default-member': 'error',

        // disallow use of jsdoc-marked-deprecated imports
        // https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-deprecated.md
        'import/no-deprecated': 'off',

        // Forbid the use of extraneous packages
        // https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-extraneous-dependencies.md
        // paths are treated both as absolute paths, and relative to process.cwd()
        'import/no-extraneous-dependencies': ['error', {
          devDependencies: [
            'test/**', // tape, common npm pattern
            'tests/**', // also common npm pattern
            'spec/**', // mocha, rspec-like pattern
            '**/__tests__/**', // jest pattern
            'test.{js,jsx}', // repos with a single test file
            'test-*.{js,jsx}', // repos with multiple top-level test files
            '**/*.{test,spec}.{js,jsx}', // tests where the extension denotes that it is a test
            '**/jest.config.js', // jest config
            '**/webpack.config.js', // webpack config
            '**/webpack.config.*.js', // webpack config
            '**/rollup.config.js', // rollup config
            '**/rollup.config.*.js', // rollup config
            '**/gulpfile.js', // gulp config
            '**/gulpfile.*.js', // gulp config
            '**/Gruntfile{,.js}', // grunt config
            '**/protractor.conf.js', // protractor config
            '**/protractor.conf.*.js', // protractor config
          ],
          optionalDependencies: false,
        }],

        // Forbid mutable exports
        // https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-mutable-exports.md
        'import/no-mutable-exports': 'error',

        // Module systems:

        // disallow require()
        // https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-commonjs.md
        'import/no-commonjs': 'off',

        // disallow AMD require/define
        // https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-amd.md
        'import/no-amd': 'error',

        // No Node.js builtin modules
        // https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-nodejs-modules.md
        // TODO: enable?
        'import/no-nodejs-modules': 'off',

        // Style guide:

        // disallow non-import statements appearing before import statements
        // https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/first.md
        'import/first': ['error', 'absolute-first'],

        // disallow non-import statements appearing before import statements
        // https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/imports-first.md
        // deprecated: use `import/first`
        'import/imports-first': 'off',

        // disallow duplicate imports
        // https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-duplicates.md
        'import/no-duplicates': 'error',

        // disallow namespace imports
        // TODO: enable?
        // https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-namespace.md
        'import/no-namespace': 'off',

        // Ensure consistent use of file extension within the import path
        // https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/extensions.md
        'import/extensions': ['error', 'always', {
          js: 'never',
          jsx: 'never',
        }],

        // Enforce a convention in module import order
        // https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/order.md
        // TODO: enable?
        'import/order': ['off', {
          groups: ['builtin', 'external', 'internal', 'parent', 'sibling', 'index'],
          'newlines-between': 'never',
        }],

        // Require a newline after the last import/require in a group
        // https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/newline-after-import.md
        'import/newline-after-import': 'error',

        // Require modules with a single export to use a default export
        // https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/prefer-default-export.md
        'import/prefer-default-export': 'error',

        // Restrict which files can be imported in a given folder
        // https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-restricted-paths.md
        'import/no-restricted-paths': 'off',

        // Forbid modules to have too many dependencies
        // https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/max-dependencies.md
        'import/max-dependencies': ['off', { max: 10 }],

        // Forbid import of modules using absolute paths
        // https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-absolute-path.md
        'import/no-absolute-path': 'error',

        // Forbid require() calls with expressions
        // https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-dynamic-require.md
        'import/no-dynamic-require': 'error',

        // prevent importing the submodules of other modules
        // https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-internal-modules.md
        'import/no-internal-modules': ['off', {
          allow: [],
        }],

        // Warn if a module could be mistakenly parsed as a script by a consumer
        // leveraging Unambiguous JavaScript Grammar
        // https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/unambiguous.md
        // this should not be enabled until this proposal has at least been *presented* to TC39.
        // At the moment, it's not a thing.
        'import/unambiguous': 'off',

        // Forbid Webpack loader syntax in imports
        // https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-webpack-loader-syntax.md
        'import/no-webpack-loader-syntax': 'error',

        // Prevent unassigned imports
        // https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-unassigned-import.md
        // importing for side effects is perfectly acceptable, if you need side effects.
        'import/no-unassigned-import': 'off',

        // Prevent importing the default as if it were named
        // https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-named-default.md
        'import/no-named-default': 'error',

        // Reports if a module's default export is unnamed
        // https://github.com/benmosher/eslint-plugin-import/blob/d9b712ac7fd1fddc391f7b234827925c160d956f/docs/rules/no-anonymous-default-export.md
        'import/no-anonymous-default-export': ['off', {
          allowArray: false,
          allowArrowFunction: false,
          allowAnonymousClass: false,
          allowAnonymousFunction: false,
          allowLiteral: false,
          allowObject: false,
        }],
    }
}